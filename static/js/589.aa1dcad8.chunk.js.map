{"version":3,"file":"static/js/589.aa1dcad8.chunk.js","mappings":"ySACA,EAAwB,qB,SCiCxB,EA9Bc,SAACA,GACb,IAAMC,EAAc,GAEpB,IAAI,IAAIC,KAAkBF,EAAMC,YAC9BA,EAAYE,KAAK,CAACC,KAAMF,EAAgBG,OAAQL,EAAMC,YAAYC,KAGpE,IAAMI,EAAmBL,EAAYM,KAAI,SAAAC,GACvC,OACE,kBACAC,MAAO,CACLC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,OANX,UAQGN,EAAGJ,KARN,KAQcI,EAAGH,OARjB,MAAWG,EAAGJ,SAalB,OACE,iBAAKW,UAAWC,EAAhB,WACE,yCAAiBV,EAAjB,QACA,qCAAW,yCAAkBN,EAAMiB,MAAMC,QAAQ,GAAtC,OAAX,W,wCCpBAC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAyBH,OAzBGA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,oBAAAA,MAEJ,WACEC,KAAKpB,MAAMqB,cAAcD,KAAKpB,MAAMsB,MAAOF,KAAKpB,MAAMuB,UACvD,oBAED,WACE,IAAIC,GAAS,SAACC,EAAA,EAAD,IAab,OAXKL,KAAKpB,MAAM0B,UACdF,EACEJ,KAAKpB,MAAMwB,OAAOjB,KAAI,SAAAoB,GACpB,OAAQ,SAAC,EAAD,CAEN1B,YAAa0B,EAAM1B,YACnBgB,OAAQU,EAAMV,OAFTU,EAAMC,SAQjB,yBACGJ,QAGN,EAzBGL,CAAeU,EAAAA,WA4BRC,EAAkB,SAAAC,GAC7B,MAAO,CACLP,OAAQO,EAAMP,OAAOA,OACrBE,QAASK,EAAMP,OAAOE,QACtBJ,MAAOS,EAAMC,KAAKV,MAClBC,OAAQQ,EAAMC,KAAKT,SAIVU,EAAqB,SAAAC,GAChC,MAAO,CACLb,cAAe,SAACC,EAAOC,GAAR,OAAmBW,EAASC,EAAAA,GAAoBb,EAAOC,OAI1E,GAAea,EAAAA,EAAAA,IAAQN,EAAiBG,EAAxC,EAA4DI,EAAAA,EAAAA,GAAiBlB,EAAQmB,EAAAA","sources":["webpack://burger-bogo/./src/components/Order/Order.module.css?cfb9","components/Order/Order.jsx","containers/Checkout/Orders/Orders.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Order\":\"Order_Order__8uE8T\"};","import React from 'react';\n\nimport classes from './Order.module.css';\n\nconst Order = (props) => {\n  const ingredients = [];\n\n  for(let ingredientName in props.ingredients) {\n    ingredients.push({name: ingredientName, amount: props.ingredients[ingredientName]});\n  }\n\n  const ingredientOutput = ingredients.map(ig => {\n    return (\n      <span key={ig.name} \n      style={{\n        textTransform: 'capitalize',\n        display: 'inline-block',\n        margin: '0 8px',\n        border: '1px solid #ccc',\n        padding: '5px'\n        }}>\n        {ig.name} ({ig.amount})\n      </span>\n    );\n  });\n\n  return(\n    <div className={classes.Order}>\n      <p>Ingredients: {ingredientOutput} </p>\n      <p> Price: <strong> &#8377; {props.price.toFixed(2)} </strong> </p>\n    </div>\n  );\n}\n\nexport default Order;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Order from '../../../components/Order/Order';\nimport axios from '../../../axios-order';\nimport withErrorhandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport * as actions from '../../../store/actions/index';\n\nclass Orders extends Component {\n\n  componentDidMount() {\n    this.props.onFetchOrders(this.props.token, this.props.userId);\n  }\n\n  render () {\n    let orders = <Spinner />;\n\n    if (!this.props.loading) {\n      orders = (\n        this.props.orders.map(order => {\n          return (<Order \n            key={order.id}\n            ingredients={order.ingredients}\n            price={+order.price} />)\n        })\n      );\n    }\n\n    return (\n      <div>\n        {orders}\n      </div>\n    );\n  }\n}\n\nexport const mapStateToProps = state => {\n  return {\n    orders: state.orders.orders,\n    loading: state.orders.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nexport const mapDispatchToProps = dispatch => {\n  return {\n    onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorhandler(Orders, axios));"],"names":["props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ig","style","textTransform","display","margin","border","padding","className","classes","price","toFixed","Orders","this","onFetchOrders","token","userId","orders","Spinner","loading","order","id","Component","mapStateToProps","state","auth","mapDispatchToProps","dispatch","actions","connect","withErrorhandler","axios"],"sourceRoot":""}