{"version":3,"file":"static/js/554.7a4247f3.chunk.js","mappings":"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","sources":["webpack://burger-bogo/./src/components/UI/Input/Input.module.css?4bac","components/UI/Input/Input.jsx","webpack://burger-bogo/./src/containers/Auth/Auth.module.css?28f1","containers/Auth/Auth.jsx","shared/validation.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Input\":\"Input_Input__8hdy0\",\"Label\":\"Input_Label__hxAgH\",\"InputElement\":\"Input_InputElement__lS-uv\",\"Invalid\":\"Input_Invalid__02WcZ\"};","import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n  let inputEl = null;\n  const inputClasses = [classes.InputElement];\n\n  if(props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  switch(props.elementType) {\n    case ('input'):\n      inputEl = (<input \n        {...props.elementConfig} \n        className={inputClasses.join(' ')} \n        value={props.value}\n        onChange={props.changed} />);\n      break;\n    case ('textarea'):\n      inputEl = (<textarea \n        {...props.elementConfig} \n        className={inputClasses.join(' ')} \n        value={props.value}\n        onChange={props.changed} />);\n      break;\n      case ('select'):\n        inputEl = (\n          <select className={inputClasses.join(' ')} value={props.value}\n          onChange={props.changed} >\n            {props.elementConfig.options.map(option => (\n              <option value={option.value} key={option.value}>\n                {option.displayValue}\n              </option>\n            ))}\n          </select>\n        );\n        break;\n    default:\n      inputEl = (<input \n        {...props.elementConfig} \n        className={inputClasses.join(' ')} \n        value={props.value}\n        onChange={props.changed} />);\n  }\n\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}> {props.label} </label>\n      {inputEl}\n    </div>\n  );\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nexport default {\"Auth\":\"Auth_Auth__gETeH\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { updateObject } from '../../shared/utility';\nimport { checkValidity } from '../../shared/validation';\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'E-mail address'\n        },\n        value: '',\n        validation: {\n          required: true,\n          isEmail: true,\n          minLength: 7\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'password',\n          placeholder: 'Your Password'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 6,\n          maxLength: 15\n        },\n        valid: false,\n        touched: false\n      },\n    },\n    isSignUp: true\n  };\n\n\n  componentDidMount() {\n    if(!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath('/');\n    }\n  }\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n        touched: true\n      }) \n    });\n\n    this.setState({controls: updatedControls});\n  };\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\n  }\n\n  switchAuthModehandler = () => {\n    this.setState(prevState => {\n      return {isSignUp: !prevState.isSignUp};\n    });\n  }\n\n\n  render() {\n    const formElemenrArray = [];\n\n    for (let key in this.state.controls) {\n      formElemenrArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElemenrArray.map(formEl => (\n      <Input key={formEl.id}\n      elementType={formEl.config.elementType} \n      elementConfig={formEl.config.elementConfig} \n      value={formEl.config.value}\n      invalid={!formEl.config.valid}\n      shouldValidate={formEl.config.validation}\n      touched={formEl.config.touched}\n      changed={(event) => this.inputChangedHandler(event, formEl.id)} />\n    ));\n\n    if(this.props.loading) {\n      form = <Spinner />;\n    }\n\n    let errorMsg = null;\n\n    if(this.props.error) {\n      errorMsg = (\n        <p> {this.props.error.message} </p>\n      );\n    }\n\n    let redirectToHome = null;\n\n    if(this.props.isAuthenticated) {\n      redirectToHome = <Navigate to={this.props.authRedirectPath} />;\n    }\n\n    return (\n      <div className={classes.Auth}>\n        {redirectToHome}\n        {errorMsg}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button btnType='Success'> SUBMIT </Button>\n        </form>\n        <Button btnType=\"Danger\"\n          clicked={this.switchAuthModehandler} >\n          SWITCH TO SIGN { this.state.isSignUp ? 'IN' : 'UP' } \n        </Button>\n      </div>\n    );\n  };\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token != null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: (path) => dispatch(actions.setAuthRedirectPath(path))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","export const checkValidity = (value, rules) => {\n  let isValid = true;\n\n  if(!rules) {\n    return;\n  }\n\n  if(rules.required) {\n    isValid = value.trim() !== '' && isValid;\n  }\n\n  if(rules.minLength) {\n    isValid = value.length >= rules.minLength && isValid;\n  }\n\n  if(rules.maxLength) {\n    isValid = value.length <= rules.maxLength && isValid;\n  }\n\n  if (rules.isEmail) {\n    const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n    isValid = pattern.test(value) && isValid;\n  }\n\n  if (rules.isNumeric) {\n    const pattern = /^\\d+$/;\n    isValid = pattern.test(value) && isValid;\n  }\n\n  return isValid;\n};\n\n"],"names":["props","inputEl","inputClasses","classes","invalid","shouldValidate","touched","push","elementType","elementConfig","className","join","value","onChange","changed","options","map","option","displayValue","label","Auth","state","controls","email","type","placeholder","validation","required","isEmail","minLength","valid","password","maxLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModehandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElemenrArray","key","id","config","form","formEl","Input","loading","Spinner","errorMsg","error","message","redirectToHome","isAuthenticated","to","onSubmit","Button","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","path","rules","isValid","trim","length","test","isNumeric"],"sourceRoot":""}