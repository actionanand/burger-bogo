{"version":3,"file":"static/js/418.2d6bd4ad.chunk.js","mappings":"6JACA,G,QAAwB,sBAAxB,EAAqD,qBAArD,EAAyF,4BAAzF,EAA+H,uB,SCsD/H,EAnDc,SAACA,GACb,IAAIC,EAAU,KACRC,EAAe,CAACC,GAMtB,OAJGH,EAAMI,SAAWJ,EAAMK,gBAAkBL,EAAMM,SAChDJ,EAAaK,KAAKJ,GAGbH,EAAMQ,aACX,IAAM,QA0BN,QACEP,GAAW,oCACLD,EAAMS,eADD,IAETC,UAAWR,EAAaS,KAAK,KAC7BC,MAAOZ,EAAMY,MACbC,SAAUb,EAAMc,iBAxBpB,IAAM,WACJb,GAAW,uCACLD,EAAMS,eADD,IAETC,UAAWR,EAAaS,KAAK,KAC7BC,MAAOZ,EAAMY,MACbC,SAAUb,EAAMc,WAClB,MACA,IAAM,SACJb,GACE,mBAAQS,UAAWR,EAAaS,KAAK,KAAMC,MAAOZ,EAAMY,MACxDC,SAAUb,EAAMc,QADhB,SAEGd,EAAMS,cAAcM,QAAQC,KAAI,SAAAC,GAAM,OACrC,mBAAQL,MAAOK,EAAOL,MAAtB,SACGK,EAAOC,cADwBD,EAAOL,YAerD,OACE,iBAAKF,UAAWP,EAAhB,WACE,mBAAOO,UAAWP,EAAlB,cAAmCH,EAAMmB,MAAzC,OACClB,O,sJCjDP,EAAkC,yC,6BCwBlC,EAjBwB,SAACD,GACrB,OACE,iBAAKU,UAAWP,EAAhB,WACE,qDACA,gBAAKiB,MAAO,CAACC,MAAO,OAAQC,OAAQ,QAApC,UACE,SAACC,EAAA,EAAD,CAAQC,YAAaxB,EAAMwB,iBAE7B,SAACC,EAAA,EAAD,CACEC,QAAQ,SACRC,QAAS3B,EAAM4B,kBAFjB,qBAGA,SAACH,EAAA,EAAD,CACEC,QAAQ,UACRC,QAAS3B,EAAM6B,kBAFjB,0B,oBCjBR,EAA8B,iC,sECgBxBC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAoIH,OApIGA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KACJC,MAAQ,CACNC,UAAW,CACPC,KAAM,CACJzB,YAAa,QACbC,cAAe,CACbyB,KAAM,OACNC,YAAa,aAEfvB,MAAO,GACPwB,WAAY,CACVC,UAAU,EACVC,UAAW,GAEbC,OAAO,EACPjC,SAAS,GAEXkC,OAAQ,CACNhC,YAAa,QACbC,cAAe,CACbyB,KAAM,OACNC,YAAa,eAEfvB,MAAO,GACPwB,WAAY,CACVC,UAAU,EACVC,UAAW,GAEbC,OAAO,EACPjC,SAAS,GAEXmC,QAAS,CACPjC,YAAa,QACbC,cAAe,CACbyB,KAAM,OACNC,YAAa,iBAEfvB,MAAO,GACPwB,WAAY,CACVC,UAAU,EACVC,UAAW,EACXI,UAAW,EACXC,WAAW,GAEbJ,OAAO,EACPjC,SAAS,GAEXsC,QAAS,CACPpC,YAAa,QACbC,cAAe,CACbyB,KAAM,OACNC,YAAa,gBAEfvB,MAAO,GACPwB,WAAY,CACVC,UAAU,EACVC,UAAW,GAEbC,OAAO,EACPjC,SAAS,GAEXuC,MAAO,CACLrC,YAAa,QACbC,cAAe,CACbyB,KAAM,QACNC,YAAa,eAEfvB,MAAO,GACPwB,WAAY,CACVC,UAAU,EACVS,SAAS,EACTR,UAAW,GAEbC,OAAO,EACPjC,SAAS,GAEXyC,eAAgB,CACdvC,YAAa,SACbC,cAAe,CACbM,QAAS,CACP,CAACH,MAAO,UAAWM,aAAc,WACjC,CAACN,MAAO,WAAYM,aAAc,cAGtCN,MAAO,WACPwB,WAAY,GACZG,OAAO,IAGbS,aAAa,GAxFP,EA4FRC,aAAe,SAACC,GACdA,EAAMC,iBAEN,IAAMC,EAAW,GAEjB,IAAI,IAAIC,KAAU,EAAKtB,MAAMC,UAC3BoB,EAASC,GAAU,EAAKtB,MAAMC,UAAUqB,GAAQzC,MAGlD,IAAM0C,EAAQ,CACZ9B,YAAa,EAAKxB,MAAMuD,KACxBC,MAAO,EAAKxD,MAAMwD,MAClBC,UAAWL,EACXM,OAAQ,EAAK1D,MAAM0D,QAGrB,EAAK1D,MAAM2D,cAAcL,EAAO,EAAKtD,MAAM4D,QAE5C,EAEDC,oBAAsB,SAACX,EAAOY,GAE5B,IAAMC,GAAgBC,EAAAA,EAAAA,GAAa,EAAKjC,MAAMC,UAAU8B,GAAkB,CACxElD,MAAOsC,EAAMe,OAAOrD,MACpB2B,OAAO2B,EAAAA,EAAAA,GAAchB,EAAMe,OAAOrD,MAAO,EAAKmB,MAAMC,UAAU8B,GAAiB1B,YAC/E9B,SAAS,IAGL6D,GAAmBH,EAAAA,EAAAA,GAAa,EAAKjC,MAAMC,WAAZ,UAClC8B,EAAkBC,IAGjBf,GAAc,EAElB,IAAI,IAAIoB,KAAkBD,EACxBnB,EAAcmB,EAAiBC,GAAgB7B,OAASS,EAG1D,EAAKqB,SAAS,CAACrC,UAAWmC,EAAkBnB,YAAAA,KAC7C,EAsCA,OAtCA,8BAED,WAAW,IAAD,OACFsB,EAAmB,GAEzB,IAAK,IAAIC,KAAOC,KAAKzC,MAAMC,UACzBsC,EAAiB/D,KAAK,CACpBkE,GAAIF,EACJG,OAAQF,KAAKzC,MAAMC,UAAUuC,KAIjC,IAAIlB,GACF,kBAAMsB,SAAUH,KAAKvB,aAArB,UACGqB,EAAiBtD,KAAI,SAAAqC,GAAM,OAC1B,SAACuB,EAAA,EAAD,CACEpE,YAAa6C,EAAOqB,OAAOlE,YAC3BC,cAAe4C,EAAOqB,OAAOjE,cAC7BG,MAAOyC,EAAOqB,OAAO9D,MACrBR,SAAUiD,EAAOqB,OAAOnC,MACxBlC,eAAgBgD,EAAOqB,OAAOtC,WAC9B9B,QAAS+C,EAAOqB,OAAOpE,QACvBQ,QAAS,SAACoC,GAAD,OAAW,EAAKW,oBAAoBX,EAAOG,EAAOoB,MAPjDpB,EAAOoB,QASrB,SAAChD,EAAA,EAAD,CAAQC,QAAQ,UAAUmD,UAAWL,KAAKzC,MAAMiB,YAAhD,sBAQJ,OAJGwB,KAAKxE,MAAM8E,UACZzB,GAAS,SAAC0B,EAAA,EAAD,MAIT,iBAAKrE,UAAWP,EAAhB,WACE,oDACCkD,SAGN,EA1KGvB,CAAoBkD,EAAAA,WA6L1B,GAAeC,EAAAA,EAAAA,KAVS,SAAAlD,GACtB,MAAO,CACLwB,KAAMxB,EAAMmD,cAAc1D,YAC1BgC,MAAOzB,EAAMmD,cAAcC,WAC3BL,QAAS/C,EAAMqD,OAAON,QACtBlB,MAAO7B,EAAMsD,KAAKzB,MAClBF,OAAQ3B,EAAMsD,KAAK3B,WAZI,SAAA4B,GACzB,MAAO,CACL3B,cAAgB,SAACF,EAAWG,GAAZ,OAAsB0B,EAASC,EAAAA,GAAuB9B,EAAWG,QAcrF,EAA4D4B,EAAAA,EAAAA,IAAWC,EAAAA,EAAAA,GAAiB3D,EAAa4D,EAAAA,KCpM/FC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAEJ,aAAe,IAAD,yBACZ,gBA6BFC,yBAA2B,WACzB,EAAK5F,MAAM6F,SAAS,iBA7BpB,EAAKC,yBAA2B,EAAKA,yBAAyBC,MAA9B,WAFpB,EAyDb,O,gDA/BD,WACEvB,KAAKxE,MAAM6F,SAAS,OACrB,oBAMD,WACE,IAAIG,GAAU,SAAC,KAAD,CAAUC,GAAG,MAE3B,GAAIzB,KAAKxE,MAAMuD,KAAM,CACnB,IAAM2C,EAAoB1B,KAAKxE,MAAMmG,WAAY,SAAC,KAAD,CAAUF,GAAG,MAAS,KACvED,GACE,2BACIE,GAEF,SAACE,EAAD,CACE5E,YAAagD,KAAKxE,MAAMuD,KACxB3B,kBAAmB4C,KAAKsB,yBACxBjE,kBAAmB2C,KAAKoB,4BAE1B,SAAC,KAAD,WACE,SAAC,KAAD,CAAOS,KAAK,eACVC,SAAS,SAAC,EAAD,WAMnB,OAAON,MACR,EA3DGL,CAAiBX,EAAAA,WAsEvB,GAAeC,EAAAA,EAAAA,KARS,SAAAlD,GACtB,MAAO,CACLwB,KAAMxB,EAAMmD,cAAc1D,YAC1B2E,UAAWpE,EAAMqD,OAAOe,aAK5B,EAAwCX,EAAAA,EAAAA,GAAWG,K,qDChF5C,IAAMzB,EAAgB,SAACtD,EAAO2F,GACnC,IAAIC,GAAU,EAEd,GAAID,EAAJ,CAgBA,GAZGA,EAAMlE,WACPmE,EAA2B,KAAjB5F,EAAM6F,QAAiBD,GAGhCD,EAAMjE,YACPkE,EAAU5F,EAAM8F,QAAUH,EAAMjE,WAAakE,GAG5CD,EAAM7D,YACP8D,EAAU5F,EAAM8F,QAAUH,EAAM7D,WAAa8D,GAG3CD,EAAMzD,QAAS,CAEjB0D,EADgB,wIACEG,KAAK/F,IAAU4F,EAGnC,GAAID,EAAM5D,UAAW,CAEnB6D,EADgB,QACEG,KAAK/F,IAAU4F,EAGnC,OAAOA","sources":["webpack://burger-bogo/./src/components/UI/Input/Input.module.css?4bac","components/UI/Input/Input.jsx","webpack://burger-bogo/./src/components/Order/CheckoutSummary/CheckoutSummary.module.css?4539","components/Order/CheckoutSummary/CheckoutSummary.jsx","webpack://burger-bogo/./src/containers/Checkout/ContactData/ContactData.module.css?5227","containers/Checkout/ContactData/ContactData.jsx","containers/Checkout/Checkout.jsx","shared/validation.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Input\":\"Input_Input__8hdy0\",\"Label\":\"Input_Label__hxAgH\",\"InputElement\":\"Input_InputElement__lS-uv\",\"Invalid\":\"Input_Invalid__02WcZ\"};","import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n  let inputEl = null;\n  const inputClasses = [classes.InputElement];\n\n  if(props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  switch(props.elementType) {\n    case ('input'):\n      inputEl = (<input \n        {...props.elementConfig} \n        className={inputClasses.join(' ')} \n        value={props.value}\n        onChange={props.changed} />);\n      break;\n    case ('textarea'):\n      inputEl = (<textarea \n        {...props.elementConfig} \n        className={inputClasses.join(' ')} \n        value={props.value}\n        onChange={props.changed} />);\n      break;\n      case ('select'):\n        inputEl = (\n          <select className={inputClasses.join(' ')} value={props.value}\n          onChange={props.changed} >\n            {props.elementConfig.options.map(option => (\n              <option value={option.value} key={option.value}>\n                {option.displayValue}\n              </option>\n            ))}\n          </select>\n        );\n        break;\n    default:\n      inputEl = (<input \n        {...props.elementConfig} \n        className={inputClasses.join(' ')} \n        value={props.value}\n        onChange={props.changed} />);\n  }\n\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}> {props.label} </label>\n      {inputEl}\n    </div>\n  );\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nexport default {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__29VOT\"};","import React from 'react';\n\nimport classes from './CheckoutSummary.module.css';\n\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\n\n\nconst checkoutSummary = (props) => {\n    return (\n      <div className={classes.CheckoutSummary}>\n        <h1>We hope it tastes well!</h1>\n        <div style={{width: '100%', margin: 'auto'}}>\n          <Burger ingredients={props.ingredients}/>\n        </div>\n        <Button \n          btnType=\"Danger\"\n          clicked={props.checkoutCancelled}>CANCEL</Button>\n        <Button \n          btnType=\"Success\"\n          clicked={props.checkoutContinued}>CONTINUE</Button>\n      </div>\n    );\n}\n\nexport default checkoutSummary;","// extracted by mini-css-extract-plugin\nexport default {\"ContactData\":\"ContactData_ContactData__8O0-5\"};","import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\n\nimport classes from './ContactData.module.css';\n\nimport Button from '../../../components/UI/Button/Button';\nimport axios from '../../../axios-order';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport withRouter from '../../../hoc/withRouter/withRouter';\nimport withErrorhandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject } from '../../../shared/utility';\nimport { checkValidity } from '../../../shared/validation';\n\n\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 3\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Street'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 3\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Zip code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 6,\n            isNumeric: true\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Country'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 3\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-mail'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true,\n            minLength: 7\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [\n              {value: 'fastest', displayValue: 'Fastest'},\n              {value: 'cheapest', displayValue: 'Cheapest'}\n            ]\n          },\n          value: 'cheapest',\n          validation: {},\n          valid: true\n        },\n    },\n    isFormValid: false\n  };\n\n\n  orderHandler = (event) => {\n    event.preventDefault();\n\n    const formData = {};\n\n    for(let formEl in this.state.orderForm) {\n      formData[formEl] = this.state.orderForm[formEl].value;\n    }\n\n    const order = {\n      ingredients: this.props.ings,\n      price: this.props.price,\n      orderData: formData,\n      userId: this.props.userId\n    };\n\n    this.props.onOrderBurger(order, this.props.token);\n\n  }\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    \n    const updatedFormEl = updateObject(this.state.orderForm[inputIdentifier], {\n      value: event.target.value,\n      valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n      touched: true\n    });\n\n    const updatedOrderForm = updateObject(this.state.orderForm, {\n      [inputIdentifier]: updatedFormEl\n    });\n    \n    let isFormValid = true;\n\n    for(let formIdentifier in updatedOrderForm) {\n      isFormValid = updatedOrderForm[formIdentifier].valid && isFormValid;\n    }\n\n    this.setState({orderForm: updatedOrderForm, isFormValid});\n  }\n\n  render () {\n    const formElemenrArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElemenrArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let formEl = (\n      <form onSubmit={this.orderHandler} >\n        {formElemenrArray.map(formEl => (\n          <Input key={formEl.id}\n            elementType={formEl.config.elementType} \n            elementConfig={formEl.config.elementConfig} \n            value={formEl.config.value}\n            invalid={!formEl.config.valid}\n            shouldValidate={formEl.config.validation}\n            touched={formEl.config.touched}\n            changed={(event) => this.inputChangedHandler(event, formEl.id)} />\n        ))}\n        <Button btnType='Success' disabled={!this.state.isFormValid}>ORDER</Button>\n      </form>\n    );\n\n    if(this.props.loading) {\n      formEl = <Spinner />;\n    }\n\n    return (\n      <div className={classes.ContactData}>\n        <h4>Enter your contact data</h4>\n        {formEl}\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger : (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.orders.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(withErrorhandler(ContactData, axios)));","import React, { Component } from 'react';\n\nimport { Route, Routes, Navigate } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport withRouter from '../../hoc/withRouter/withRouter';\nimport ContactData from './ContactData/ContactData';\n\n\nclass Checkout extends Component {\n\n  constructor() {\n    super();\n    this.checkoutCancelledHandler = this.checkoutCancelledHandler.bind(this);\n  }\n\n  // componentDidMount() {\n  //   const query = new URLSearchParams(this.props.location.search);\n  //   // console.log(query)\n  //   const ingredients = {};\n  //   let price = 0;\n\n  //   for(let param of query.entries()) {\n  //     if(param[0] === 'price') {\n  //       price = +param[1];\n  //     } else {\n  //       ingredients[param[0]] = +param[1]; // ['salad', '2'];\n  //     }\n  //   }\n\n  //   // console.log(ingredients);\n\n  //   this.setState({ingredients, price});\n\n  // }\n\n\n  checkoutCancelledHandler() {\n    this.props.navigate('/');\n  }\n\n  checkoutContinuedHandler = () => {\n    this.props.navigate('contact-data');\n  }\n\n  render() {\n    let summary = <Navigate to=\"/\" />;\n\n    if (this.props.ings) {\n      const purchasedRedirect = this.props.purchased ? <Navigate to=\"/\" /> : null ;\n      summary = (\n        <div>\n          { purchasedRedirect }\n\n          <CheckoutSummary \n            ingredients={this.props.ings}\n            checkoutCancelled={this.checkoutCancelledHandler}\n            checkoutContinued={this.checkoutContinuedHandler} />\n\n          <Routes>\n            <Route path='contact-data' \n              element={<ContactData />} />\n          </Routes>\n        </div>\n      );\n    }\n\n    return summary;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    purchased: state.orders.purchased\n  };\n};\n\n\nexport default connect(mapStateToProps)(withRouter(Checkout));","export const checkValidity = (value, rules) => {\n  let isValid = true;\n\n  if(!rules) {\n    return;\n  }\n\n  if(rules.required) {\n    isValid = value.trim() !== '' && isValid;\n  }\n\n  if(rules.minLength) {\n    isValid = value.length >= rules.minLength && isValid;\n  }\n\n  if(rules.maxLength) {\n    isValid = value.length <= rules.maxLength && isValid;\n  }\n\n  if (rules.isEmail) {\n    const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n    isValid = pattern.test(value) && isValid;\n  }\n\n  if (rules.isNumeric) {\n    const pattern = /^\\d+$/;\n    isValid = pattern.test(value) && isValid;\n  }\n\n  return isValid;\n};\n\n"],"names":["props","inputEl","inputClasses","classes","invalid","shouldValidate","touched","push","elementType","elementConfig","className","join","value","onChange","changed","options","map","option","displayValue","label","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","type","placeholder","validation","required","minLength","valid","street","zipCode","maxLength","isNumeric","country","email","isEmail","deliveryMethod","isFormValid","orderHandler","event","preventDefault","formData","formEl","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormEl","updateObject","target","checkValidity","updatedOrderForm","formIdentifier","setState","formElemenrArray","key","this","id","config","onSubmit","Input","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","orders","auth","dispatch","actions","withRouter","withErrorhandler","axios","Checkout","checkoutContinuedHandler","navigate","checkoutCancelledHandler","bind","summary","to","purchasedRedirect","purchased","CheckoutSummary","path","element","rules","isValid","trim","length","test"],"sourceRoot":""}